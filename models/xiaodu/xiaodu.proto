message BidRequest {
    // Unique ID of the bid request, provided by the exchange.
    required string id = 1;

    // Array of Imp objects representing the impressions offered.
    // At least 1 Imp object is required.
    repeated Imp imp = 2;

    // Details via a Site object about the publisher's website.
    // Only applicable for websites.
    optional Site site = 3;

    // Details via an App object about the publisher's app.
    // Only applicable for apps.
    optional App app = 4;

    // Details via a Device object about the user's
    // device to which the impression will be delivered.
    optional Device device = 5;

    // Details via a User object about the human user of the device.
    optional User user = 6;

    // Blocked advertiser categories using the IAB content categories.
    repeated string bcat = 12;

    // Block list of advertisers by their domains (e.g., "xiaodu.com").
    repeated string badv = 13;
 
    // This object describes an ad placement or impression being auctioned.
    message Imp {
        // A unique identifier for this impression.
        required string id = 1;

        // Required if this impression is offered as a banner ad opportunity.
        optional Banner banner = 2;

        // Required if this impression is offered as a video ad opportunity.
        optional Video video = 3;

        // Required if this impression is offered as a native ad opportunity.
        optional Native native = 13;

        // xiaodu-adx support different bid type.
        message BidInfo {
            required int32 bidtype = 1;
            optional int32 bidfloor = 2;

            enum BidType {
                BID_TYPE_CPM = 0;
                BID_TYPE_CPC = 1;
                BID_TYPE_CPD = 2;
                BID_TYPE_CPT = 3;
            }
        }

        // List of allowed bidtype and corresponding bidfloor.
        // At least 1 BidInfo object is required.
        repeated BidInfo bidinfo = 14;
        
        enum SlotType {
            SLOT_FIXED = 0;         // 固定横幅
            SLOT_STARTUP = 1;       // 开屏
            SLOT_INTERSTITIAL = 2;  // 插屏
            SLOT_FLOATING = 3;      // 悬浮横幅
            SLOT_VIDEO = 4;         // 视频流
            SLOT_NATIVE = 5;        // 原生广告
        }

        // Type of current adslot.
        optional SlotType slottype = 15;

        // Banner impression.
        message Banner {
            // Width of the impression in pixels.
            // If neither wmin nor wmax are specified, this value is an exact
            // width requirement. Otherwise it is a preferred width.
            optional int32 w = 1;

            // Height of the impression in pixels.
            // If neither hmin nor hmax are specified, this value is an exact
            // height requirement. Otherwise it is a preferred height.
            optional int32 h = 2;

            // Maximum width of the impression in pixels.
            optional int32 wmax = 11;

            // Maximum height of the impression in pixels.
            optional int32 hmax = 12;

            // Minimum width of the impression in pixels.
            optional int32 wmin = 13;

            // Minimum height of the impression in pixels.
            optional int32 hmin = 14;

            enum SlotType {
                SLOT_FIXED = 0;         // 固定横幅
                SLOT_STARTUP = 1;       // 开屏
                SLOT_INTERSTITIAL = 2;  // 插屏
                SLOT_FLOATING = 3;      // 悬浮横幅
                SLOT_VIDEO = 4;         // 视频流
                SLOT_NATIVE = 5;        // 原生广告
            }

            // Type of current adslot.
            optional SlotType slottype = 15;

            // Whitelist of content MIME types supported. 
            // Popular MIME types include, but are not limited to "image/jpg", 
            // "image/gif" and "application/x-shockwave-flash".
            repeated string mimes = 7;

        }

        // Video impression.
        message Video {
            // Whitelist of content MIME types supported. 
            // At least 1 element is required.
            repeated string mimes = 1;

            // Indicates if the impression must be linear, nonlinear, etc.
            // If none specified, assume all are allowed.
            optional VideoLinearity linearity = 2;

            // Minimum video ad duration in seconds.
            optional int32 minduration = 3;

            // Maximum video ad duration in seconds.
            optional int32 maxduration = 4;

            // Width of the player in pixels.
            optional int32 w = 6;

            // Height of the player in pixels.
            optional int32 h = 7;

            // Indicates the start delay in seconds for pre-roll, 
            // mid-roll, or post-roll ad placements.
            //  0: PRE_ROLL
            //  1: GENERIC_MID_ROLL
            //  -1: GENERIC_POST_ROLL
            //  Other values: videoad_start_delay
            optional int32 startdelay = 8;

            // Minimum bit rate in Kbps.
            optional int32 minbitrate = 12;

            // Maximum bit rate in Kbps.
            optional int32 maxbitrate = 13;

            enum SlotType {
                SLOT_FIXED = 0;         // 固定横幅
                SLOT_STARTUP = 1;       // 开屏
                SLOT_INTERSTITIAL = 2;  // 插屏
                SLOT_FLOATING = 3;      // 悬浮横幅
                SLOT_VIDEO = 4;         // 视频流
                SLOT_NATIVE = 5;        // 原生广告
            }

            // Type of current adslot.
            optional SlotType slottype = 14;

            // The following table indicates the options for video linearity.
            // "In-stream" or "linear" video refers to pre-roll, post-roll,
            // or mid-roll video ads where the user is forced to watch ad in
            // order to see the video content. 
            // "Overlay" or "non-linear" refer to ads that are shown on top 
            // of the video content.
            enum VideoLinearity {
                LINEAR = 1;      // Linear/In-stream
                NON_LINEAR = 2;  // Non-linear/Overlay
            }
        }
        
        // Native impression.
        message Native {
            // Asset requested by exchange on behalf of the rendering client.
            // At least 1 Asset object is required.
            repeated Asset assets = 6;

            message Asset {
                // Unique asset ID, assigned by exchange.
                required int32 id = 1;

                // Set to true if asset is required
                optional bool required = 2 [default = false];

                // The Title object is to be used for title element 
                // of the Native ad.
                message Title {
                    // Maximum length of the text in the title element.
                    required int32 len = 1;
                }

                // Only one of the {title, img, data} objects should 
                // be present in each object.
                // Title assets.
                optional Title title = 3;

                // The Image object to be used for all image elements
                // of the Native ad such as Icons, Main Image, etc.
                message Image {
                    // Type ID of the image element supported by the publisher.
                    optional ImageAssetType type = 1;

                    // Width of the image in pixels.
                    optional int32 w = 2;

                    // Height of the image in pixels.
                    optional int32 h = 3;

                    // The minimum requested width of the image in pixels.
                    // Either w or wmin should be transmitted. 
                    // If only w is included, it should be considered 
                    // an exact requirement.
                    optional int32 wmin = 4;

                    // The minimum requested height of the image in pixels.
                    // Either h or hmin should be transmitted. 
                    // If only h is included, it should be considered 
                    // an exact requirement.
                    optional int32 hmin = 5;

                    // Whitelist of content MIME types supported.
                    // If blank, assume all types are allowed.
                    repeated string mimes = 6;

                    enum ImageAssetType {
                        ICON = 1;
                        LOGO = 2;
                        MAIN = 3;
                    }
                }

                // Image assets.
                optional Image img = 4;
                   
                // The Data Object is to be used for all non-core elements 
                // of the native unit such as Ratings, Review Count, etc.
                message Data {
                    // Type ID of the element supported by the publisher.
                    required DataAssetType type = 1;

                    // Maximum length of the text in the element's response.
                    optional int32 len = 2;
            
                    enum DataAssetType {
                        SPONSORED = 1;
                        DESC = 2;
                        RATING = 3;
                        LIKES = 4;
                        DOWNLOADS = 5;
                        PRICE = 6;
                        SALEPRICE = 7;
                        PHONE = 8;
                        ADDRESS = 9;
                        DESC2 = 10;
                        DISPLAYURL = 11;
                        CTATEXT = 12;
                    }
                }
                // Data assets for desc, ratings etc.
                optional Data data = 6;
            } 
        }
    }
     
    // Site information
    message Site {
        // Site Id.
        optional string id = 1;

        // Site name.
        optional string name = 2;

        // Domain of the site.
        optional string domain = 3;

        // Array of IAB content categories of the site.
        repeated string cat = 4;

        // Quality of the site.
        optional string quality = 5;

        // Array of IAB content categories that describe 
        // the current page or view of the site.
        repeated string pagecat = 6;

        // URL of the page where the impression will be shown.
        optional string page = 7;

        // Quality of the page.
        optional string pagequality = 14;
        
        // Type of the page.
        optional string pagetype = 15;

        // Referrer URL that caused navigation to the current page.
        optional string ref = 9;

        // Comma separated list of keywords about this site.
        optional string keywords = 13;
    }

    // App information.
    message App {
        // Application Id.
        optional string id = 1;

        // Application name.
        optional string name = 2;

        // Domain of the application. For example, "mygame.foo.com".
        optional string domain = 3;

        // Array of IAB content categories of the app.
        repeated string cat = 4;

        // Quality of the app.
        optional string quality = 5;

        // Array of IAB content categories that describe 
        // the current page or view of the app.
        repeated string pagecat = 6;

        // Quality of the page.
        optional string pagequality = 18;

        // Application version.
        optional string ver = 7;

        // Application bundle or package name (for example, com.foo.mygame).
        optional string bundle = 8;

        // 0 = app is free, 1 = the app is a paid version.
        optional bool paid = 10;

        // Comma separated list of keywords about the app.
        optional string keywords = 13;

        // App store URL for an installed app.
        optional string storeurl = 16;
    }

    // Device information.
    message Device {
        // Standard "Do Not Track" flag as set in the header by the browser,
        // where 0 = tracking is unrestricted, 1 = do not track.
        optional bool dnt = 1;

        // Browser user agent string.
        optional string ua = 2;

        // IPv4 address closest to device.
        optional string ip = 3;

        // Location information.
        message Geo {
            // Latitude from -90.0 to +90.0, where negative is south.
            optional double lat = 1;

            // Longitude from -180.0 to +180.0, where negative is west.
            optional double lon = 2;

            // Country name, e.g. "中国".
            optional string country = 3;

            // Province, e.g. "广州".
            optional string prov = 6;

            // City, e.g. "深圳".
            optional string city = 7;

            // Source of location data.
            optional LocationType type = 9;

            enum LocationType {
                GPS_LOCATION = 1;
                IP = 2;
                USER_PROVIDED = 3;
            }
        }

        // Location information.
        optional Geo geo = 4;

        // Hardware device id (e.g. IMEI).
        optional string did = 5;
        optional string didsha1 = 6;
        optional string didmd5 = 7;

        // Platform device id (e.g. Adroid ID).
        optional string dpid = 8;
        optional string dpidsha1 = 9;
        optional string dpidmd5 = 10;

        // Mac address.
        optional string mac = 11;
        optional string macsha1 = 12;
        optional string macmd5 = 13;

        // IDFA from Apple device.
        optional string idfa = 14;
        optional string idfasha1 = 15;
        optional string idfamd5 = 16;

        // IPv6 address closest to device.
        optional string ipv6 = 17;

        // Carrier or ISP, e.g. "中国移动".
        optional int32 carrier = 18;

        // Device make (e.g., "Apple").
        optional string make = 19;

        // Device model (e.g., "iPhone5s").
        optional string model = 20;

        // Device operating system (e.g., "iOS").
        optional string os = 21;

        // Device operating system version (e.g., "9.1.2").
        optional string osv = 22;

        // Physical width of the screen in pixels.
        optional int32 w = 23;

        // Physical height of the screen in pixels.
        optional int32 h = 24;

        // Network connection type.
        optional ConnectionType connectiontype = 25;

        // The general type of device.
        optional DeviceType devicetype = 26;

        enum DeviceType {
            MOBILE = 1;
            PERSONAL_COMPUTER = 2;
            CONNECTED_TV = 3;
            PHONE = 4;
            TABLET = 5;
            CONNECTED_DEVICE = 6;
            SET_TOP_BOX = 7;
        }

        enum ConnectionType {
            CONNECTION_UNKNOWN = 0;
            ETHERNET = 1;
            WIFI = 2;
            CELL_UNKNOWN = 3;
            CELL_2G = 4;
            CELL_3G = 5;
            CELL_4G = 6;
        }
    }
 
    // User information.
    message User {
        // User id.
        optional string id = 1;

        // Year of birth as a 4-digit integer, e.g. 1990
        optional int32 yob = 3;

        // Gender as "M" male, "F" female.
        optional string gender = 4;

        // Comma separated list of keywords, interests, or intent.
        optional string keywords = 5;
    }
}

message BidResponse {
    // ID of the bid request to which this is a response.
    required string id = 1;
    
    // At least 1 seatbid is required if a bid is to be made.
    repeated SeatBid seatbid = 2;

    // Bidder generated response ID to assist with logging/tracking.
    optional string bidid = 3;

    message SeatBid {
        // Array of 1+ Bid objects each related to an impression.
        repeated Bid bid = 1;

        // ID of the bidder seat on whose behalf this bid is made.
        optional string seat = 2;

        // 0 = impressions can be won individually.
        // 1 = impressions must be won or lost as a group.
        optional bool group = 3;
    
        message Bid {
            // ID of the Imp object in the related bid request.
            required string impid = 2;

            // Price of this bid.
            required int32 price = 3;

            // CPM, CPC, CPD or CPT
            required int32 bidtype = 4;

            // Non-native ad response.
            optional Adm adm = 6;

            // Video VAST.
            optional string admvideo = 7;

            // Native ad response.
            optional AdmNative admnative = 8;

            // Creative ID of this bid.
            optional string crid = 10;

            // Ext data which can be accessed by macro ${AUCTION_EXTDATA}.
            optional string extdata = 11;

            message Adm {
                // URL of the asset.
                required string asseturl = 1;

                // Width of the asset in pixels.
                optional int32 w = 2;

                // Height of the asset in pixels.
                optional int32 h = 3;

                // Array of impression tracking URLs.
                repeated string imptrackers = 4;

                // Landing URL of the clickable link.
                required string landingpage = 5;

                // Third-party tracker URLs to be fired on click of the URL.
                repeated string clicktrackers = 6;

                // html snippet.
                optional string htmlsnippet = 7;
            }

            message AdmNative {
                // Array of native elements.
                repeated Asset assets = 1;

                message Link {
                    // Landing URL of the clickable link.
                    required string url = 1;

                    // Third-party tracker URLs to be fired on click of the URL.
                    repeated string clicktrackers = 2;
                }
                // Destination Link.
                optional Link link = 2;

                // Array of impression tracking URLs.
                repeated string imptrackers = 3;

                message Asset {
                    // Unique asset ID, assigned by exchange, 
                    // must match one of the asset IDs in request.
                    required int32 id = 1;

                    // Set to 1 if asset is required. 
                    // (bidder requires it to be displayed).
                    optional bool required = 2 [default = false];

                    message Title {
                        // The text associated with the text element.
                        required string text = 1;
                    }

                    // Title object for title assets.
                    optional Title title = 3;

                    message Image {
                        // URL of the image asset.
                        required string url = 1;

                        // Width of the image in pixels.
                        optional int32 w = 2;

                        // Height of the image in pixels.
                        optional int32 h = 3;
                    }

                    // Image object for image assets.
                    optional Image img = 4;

                    message Data {
                        // The formatted string of data to be displayed.
                        required string value = 1;
                    }

                    // Data object for ratings, prices etc.
                    optional Data data = 6;

                    message Link {
                        // Landing URL of the clickable link.
                        required string url = 1;

                        // Third-party tracker URLs to be fired on click of the URL.
                        repeated string clicktrackers = 2;
                    }
                    // Link object for call to actions.
                    optional Link link = 7;
                }
                 
            }
        }
    }
}
